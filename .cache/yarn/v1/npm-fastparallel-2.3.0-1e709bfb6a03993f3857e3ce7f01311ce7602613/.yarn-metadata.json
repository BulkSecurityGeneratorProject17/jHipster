{
  "manifest": {
    "name": "fastparallel",
    "version": "2.3.0",
    "description": "Zero-overhead asynchronous parallel/each/map function call",
    "main": "parallel.js",
    "scripts": {
      "lint": "standard",
      "test": "tape test.js | faucet"
    },
    "pre-commit": [
      "lint",
      "test"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/mcollina/fastparallel.git"
    },
    "keywords": [
      "parallel",
      "fast",
      "async"
    ],
    "author": {
      "name": "Matteo Collina",
      "email": "hello@matteocollina.com"
    },
    "license": "ISC",
    "bugs": {
      "url": "https://github.com/mcollina/fastparallel/issues"
    },
    "homepage": "https://github.com/mcollina/fastparallel",
    "devDependencies": {
      "async": "^2.0.0-rc.5",
      "fastbench": "^1.0.1",
      "faucet": "0.0.1",
      "insync": "^2.1.0",
      "items": "^2.1.0",
      "neo-async": "^1.8.2",
      "parallelize": "^3.0.0",
      "pre-commit": "^1.1.3",
      "standard": "^7.1.0",
      "tape": "^4.5.0"
    },
    "dependencies": {
      "reusify": "^1.0.0",
      "xtend": "^4.0.1"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v1/npm-fastparallel-2.3.0-1e709bfb6a03993f3857e3ce7f01311ce7602613/package.json",
    "readmeFilename": "README.md",
    "readme": "# fastparallel [![Build Status](https://travis-ci.org/mcollina/fastparallel.svg?branch=master)](https://travis-ci.org/mcollina/fastparallel)\n\nZero-overhead parallel function call for node.js. Also supports each\nand map!\n\nBenchmark for doing 3 calls `setImmediate` 1 million times:\n\n* non-reusable `setImmediate`: 1781ms\n* `async.parallel`: 3484ms\n* `async.each`: 2621ms\n* `async.map`: 3054ms\n* `neoAsync.parallel`: 2162ms\n* `neoAsync.each`: 2156ms\n* `neoAsync.map`: 2080ms\n* `insync.parallel`: 10252ms\n* `insync.each`: 2397ms\n* `insync.map`: 9700ms\n* `items.parallel`: 3725ms\n* `parallelize`: 2928ms\n* `fastparallel` with results: 2139ms\n* `fastparallel` without results: 1957ms\n* `fastparallel` map: 2102ms\n* `fastparallel` each: 1941ms\n\nThese benchmarks where taken via `bench.js` on node v4.2.2, on a MacBook\nPro Retina Mid 2014 (i7, 16GB of RAM).\n\nIf you need zero-overhead series function call, check out\n[fastseries](http://npm.im/fastseries). If you need a fast work queue\ncheck out [fastq](http://npm.im/fastq). If you need to run fast\nwaterfall calls, use [fastfall](http://npm.im/fastfall).\n\n[![js-standard-style](https://raw.githubusercontent.com/feross/standard/master/badge.png)](https://github.com/feross/standard)\n\n__The major difference between version 1.x.x and 2.x.x is the order of\nresults__, this is now ready to replace async in every case.\n\n## Example for parallel call\n\n```js\nvar parallel = require('fastparallel')({\n  // this is a function that will be called\n  // when a parallel completes\n  released: completed,\n\n  // if you want the results, then here you are\n  results: true\n})\n\nparallel(\n  {}, // what will be this in the functions\n  [something, something, something], // functions to call\n  42, // the first argument of the functions\n  done // the function to be called when the parallel ends\n)\n\nfunction something (arg, cb) {\n  setImmediate(cb, null, 'myresult')\n}\n\nfunction done (err, results) {\n  console.log('parallel completed, results:', results)\n}\n\nfunction completed () {\n  console.log('parallel completed!')\n}\n```\n\n## Example for each and map calls\n\n```js\nvar parallel = require('fastparallel')({\n  // this is a function that will be called\n  // when a parallel completes\n  released: completed,\n\n  // if you want the results, then here you are\n  // passing false disables map\n  results: true\n})\n\nparallel(\n  {}, // what will be this in the functions\n  something, // functions to call\n  [1, 2, 3], // the first argument of the functions\n  done // the function to be called when the parallel ends\n)\n\nfunction something (arg, cb) {\n  setImmediate(cb, null, 'myresult')\n}\n\nfunction done (err, results) {\n  console.log('parallel completed, results:', results)\n}\n\nfunction completed () {\n  console.log('parallel completed!')\n}\n\n```\n\n## Caveats\n\nThe `done` function will be called only once, even if more than one error happen.\n\nThis library works by caching the latest used function, so that running a new parallel\ndoes not cause **any memory allocations**.\n\n## Why it is so fast?\n\n1. This library is caching functions a lot.\n\n2. V8 optimizations: thanks to caching, the functions can be optimized by V8 (if they are optimizable, and I took great care of making them so).\n\n3. Don't use arrays if you just need a queue. A linked list implemented via processes is much faster if you don't need to access elements in between.\n\n4. Accept passing a this for the functions. Thanks to this hack, you can extract your functions, and place them in a outer level where they are not created at every execution.\n\n## License\n\nISC\n",
    "licenseText": "Copyright (c) 2015, Matteo Collina <matteo.collina@gmail.com>\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/fastparallel/-/fastparallel-2.3.0.tgz#1e709bfb6a03993f3857e3ce7f01311ce7602613",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/fastparallel/-/fastparallel-2.3.0.tgz",
    "hash": "1e709bfb6a03993f3857e3ce7f01311ce7602613",
    "registry": "npm",
    "packageName": "fastparallel"
  },
  "registry": "npm",
  "hash": "1e709bfb6a03993f3857e3ce7f01311ce7602613"
}