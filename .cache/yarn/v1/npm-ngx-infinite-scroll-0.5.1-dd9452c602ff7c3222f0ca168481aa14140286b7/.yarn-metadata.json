{
  "manifest": {
    "name": "ngx-infinite-scroll",
    "version": "0.5.1",
    "description": "An infinite scroll directive for Angular compatible with AoT compilation and Tree shaking",
    "main": "./bundles/ngx-infinite-scroll.umd.js",
    "module": "./modules/ngx-infinite-scroll.es5.js",
    "es2015": "./modules/ngx-infinite-scroll.js",
    "scripts": {
      "build": "node build.js",
      "test": "karma start",
      "pack-lib": "npm pack ./dist",
      "publish-lib": "npm publish ./dist",
      "publish:beta": "npm publish --tag beta ./dist",
      "compodoc": "compodoc -p tsconfig.json",
      "compodoc-serve": "compodoc -s",
      "transpile": "ngc -p ./tsconfig.json"
    },
    "typings": "./index.d.ts",
    "author": {
      "name": "Oren Farhi",
      "url": "orizens.com"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/orizens/ngx-infinite-scroll.git"
    },
    "bugs": {
      "url": "https://github.com/orizens/ngx-infinite-scroll/issues"
    },
    "homepage": "https://github.com/orizens/ngx-infinite-scroll",
    "keywords": [
      "angular",
      "javascript",
      "typescript"
    ],
    "license": "MIT",
    "peerDependencies": {
      "@angular/common": ">= 4.0.0",
      "@angular/core": ">= 4.0.0"
    },
    "devDependencies": {
      "@angular/common": "^4.0.0",
      "@angular/compiler": "^4.0.0",
      "@angular/compiler-cli": "^4.0.0",
      "@angular/core": "^4.0.0",
      "@angular/platform-browser": "^4.0.0",
      "@angular/platform-browser-dynamic": "^4.0.0",
      "@angular/platform-server": "^4.0.0",
      "@angular/animations": "^4.0.0",
      "@types/jasmine": "2.5.46",
      "@types/node": "7.0.10",
      "codelyzer": "3.0.0-beta.4",
      "compodoc": "0.0.41",
      "core-js": "2.4.1",
      "jasmine-core": "2.5.2",
      "karma": "1.5.0",
      "karma-chrome-launcher": "2.0.0",
      "karma-jasmine": "1.1.0",
      "karma-sourcemap-loader": "0.3.7",
      "karma-spec-reporter": "0.0.30",
      "karma-webpack": "2.0.3",
      "reflect-metadata": "0.1.10",
      "rollup": "0.41.6",
      "rxjs": "5.2.0",
      "ts-helpers": "1.1.2",
      "ts-loader": "2.0.3",
      "tslint": "4.5.1",
      "typescript": "^2.1.5",
      "webpack": "2.3.1",
      "zone.js": "0.8.5",
      "shelljs": "0.7.7",
      "chalk": "1.1.3",
      "uglify-js": "2.8.15",
      "sorcery": "0.10.0",
      "yargs": "7.0.2"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v1/npm-ngx-infinite-scroll-0.5.1-dd9452c602ff7c3222f0ca168481aa14140286b7/package.json",
    "readmeFilename": "README.md",
    "readme": "[![Build Status](https://travis-ci.org/orizens/ngx-infinite-scroll.svg?branch=master)](https://travis-ci.org/orizens/ngx-infinite-scroll)\n\n# Angular Infinite Scroll\nInspired by [ng-infinite-scroll](https://github.com/sroze/ngInfiniteScroll) directive for angular (> 2, 4).\n\n## Angular Support\nSupports Angular **> 4**  \nFor Angular version **<= 2.3.1**, you can use ```npm i angular2-infinite-scroll``` (latest version is 0.3.42) - please notice **the angular2-infinite-scroll** package is deprecated\n\n## Angular Consulting Services\nI'm a Senior Javascript Engineer & A Front End Consultant at [Orizens](http://orizens.com).\nMy services include:  \n- consulting to companies and startups on how to approach code in their projects and keep it maintainable.  \n- I provide project bootstrapping and development - while afterwards, I integrate it on site and guide the team on it.  \n\n[Contact Me Here](http://orizens.com/contact)\n\n## Installation\n```\nnpm install ngx-infinite-scroll --save\n```\n\n## Supported API\nCurrently supported attributes:\n* **infiniteScrollDistance**<_number_> - (optional, default: **2**) - should get a number, the number of viewport lengths from the bottom of the page at which the event will be triggered.\n* **infiniteScrollUpDistance**<_number_> - (optional, default: **1.5**) - should get a number\n* **infiniteScrollThrottle**<_number_> - (optional, default: **300**) - should get a number of **milliseconds** for throttle. The event will be triggered this many milliseconds after the user *stops* scrolling.\n* **infiniteScrollContainer**<_string|HTMLElement_> - (optional, default: null) - should get a html element or css selector for a scrollable element; window or current element will be used if this attribute is empty.\n* **scrolled**<_function_> - this will callback if the distance threshold has been reached on a scroll down.\n* **scrolledUp**<_function_> - (event: InfiniteScrollEvent) - this will callback if the distance threshold has been reached on a scroll up.\n* **scrollWindow**<_boolean_> - (optional, default: **true**) - listens to the window scroll instead of the actual element scroll. this allows to invoke a callback function in the scope of the element while listenning to the window scroll.\n* **immediateCheck**<_boolean_> - (optional, default: **false**) - invokes the handler immediately to check if a scroll event has been already triggred when the page has been loaded (i.e. - when you refresh a page that has been scrolled).\n* **infiniteScrollDisabled**<_boolean_> - (optional, default: **false**) - doesn't invoke the handler if set to true\n\n## Behavior\nBy default, the directive listens to the **window scroll** event and invoked the callback.  \n**To trigger the callback when the actual element is scrolled**, these settings should be configured:\n* [scrollWindow]=\"false\"\n* set an explict css \"height\" value to the element\n\n## DEMO\n- [**Default Scroll** By Window - plunkr](https://plnkr.co/edit/DrEDetYnZkFxR7OWWrxS?p=preview) \n- [Scroll On a **\"Modal\"** - plunkr](https://plnkr.co/edit/QnQOwE9SEapwJCCFII3L?p=preview)\n\n## Usage\nFirst, import the InfiniteScrollModule to your module:\n\n```typescript\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { AppComponent } from './app';\n\n@NgModule({\n  imports:[ BrowserModule, InfiniteScrollModule ],\n  declarations: [ AppComponent, ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n```\n\nIn this example, the **onScroll** callback will be invoked when the window is scrolled down:\n\n```typescript\nimport { Component } from '@angular/core';\n\n@Component({\n\tselector: 'app',\n\ttemplate: `\n\t\t<div class=\"search-results\"\n\t\t    infiniteScroll\n\t\t    [infiniteScrollDistance]=\"2\"\n\t\t    [infiniteScrollThrottle]=\"300\"\n\t\t    (scrolled)=\"onScroll()\">\n\t\t</div>\n\t`\n})\nexport class AppComponent {\n\tonScroll () {\n\t    console.log('scrolled!!')\n\t}\n}\n```\nin this example, whenever the \"search-results\" is scrolled, the callback will be invoked:\n\n```typescript\nimport { Component } from '@angular/core';\n\n@Component({\n\tselector: 'app',\n\tstyles: [\n\t\t`.search-results {\n\t\t\theight: 20rem;\n\t\t\toverflow: scroll;\n\t\t}`\n\t],\n\ttemplate: `\n\t\t<div class=\"search-results\"\n\t\t    infiniteScroll\n\t\t    [infiniteScrollDistance]=\"2\"\n\t\t    [infiniteScrollThrottle]=\"500\"\n\t\t    (scrolled)=\"onScroll()\"\n\t\t    [scrollWindow]=\"false\">\n\t\t</div>\n\t`\n})\nexport class AppComponent {\n\tonScroll () {\n\t    console.log('scrolled!!')\n\t}\n}\n```\n\nIn this example, the **onScrollDown** callback will be invoked when the window is scrolled down and the **onScrollUp** callback will be invoked when the window is scrolled up:\n\n```typescript\nimport { Component } from '@angular/core';\nimport { InfiniteScroll } from 'ngx-infinite-scroll';\n\n@Component({\n\tselector: 'app',\n\tdirectives: [ InfiniteScroll ],\n\ttemplate: `\n\t\t<div class=\"search-results\"\n\t\t    infiniteScroll\n\t\t    [infiniteScrollDistance]=\"2\"\n\t\t    [infiniteScrollUpDistance]=\"1.5\"\n\t\t    [infiniteScrollThrottle]=\"500\"\n\t\t    (scrolled)=\"onScrollDown()\"\n\t\t    (scrolledUp)=\"onScrollUp()\">\n\t\t</div>\n\t`\n})\nexport class AppComponent {\n\tonScrollDown () {\n\t    console.log('scrolled down!!')\n\t}\n\n\tonScrollUp () {\n    \tconsole.log('scrolled up!!')\n    }\n}\n```\n\n# Showcase Examples\n* [Echoes Player - Developed with Angular, angular-cli and ngrx](http://orizens.github.io/echoes-player) ([github repo for echoes player](http://github.com/orizens/echoes-player))\n",
    "licenseText": "MIT License\n\nCopyright (c) 2017 Roberto Simonetti\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/ngx-infinite-scroll/-/ngx-infinite-scroll-0.5.1.tgz#dd9452c602ff7c3222f0ca168481aa14140286b7",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/ngx-infinite-scroll/-/ngx-infinite-scroll-0.5.1.tgz",
    "hash": "dd9452c602ff7c3222f0ca168481aa14140286b7",
    "registry": "npm",
    "packageName": "ngx-infinite-scroll"
  },
  "registry": "npm",
  "hash": "dd9452c602ff7c3222f0ca168481aa14140286b7"
}