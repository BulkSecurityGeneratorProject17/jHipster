{
  "manifest": {
    "name": "enhanced-resolve",
    "version": "3.3.0",
    "author": {
      "name": "Tobias Koppers @sokra"
    },
    "description": "Offers a async require.resolve function. It's highly configurable.",
    "files": [
      "lib"
    ],
    "dependencies": {
      "graceful-fs": "^4.1.2",
      "memory-fs": "^0.4.0",
      "object-assign": "^4.0.1",
      "tapable": "^0.2.5"
    },
    "licenses": [
      {
        "type": "MIT",
        "url": "http://www.opensource.org/licenses/mit-license.php"
      }
    ],
    "devDependencies": {
      "beautify-lint": "^1.0.3",
      "codecov.io": "^0.1.6",
      "coveralls": "^2.11.6",
      "eslint": "^3.14.1",
      "eslint-plugin-node": "^3.0.5",
      "eslint-plugin-nodeca": "^1.0.3",
      "istanbul": "^0.4.1",
      "js-beautify": "^1.5.10",
      "mocha": "^2.3.4",
      "should": "^8.0.2"
    },
    "engines": {
      "node": ">=4.3.0 <5.0.0 || >=5.10"
    },
    "main": "lib/node.js",
    "homepage": "http://github.com/webpack/enhanced-resolve",
    "scripts": {
      "beautify-lint": "beautify-lint lib/**.js test/*.js",
      "beautify": "beautify-rewrite lib/**.js test/*.js",
      "lint": "eslint lib test",
      "pretest": "npm run lint && npm run beautify-lint",
      "test": "mocha --full-trace --check-leaks",
      "precover": "npm run lint && npm run beautify-lint",
      "cover": "istanbul cover node_modules/mocha/bin/_mocha",
      "travis": "npm run cover -- --report lcovonly"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/webpack/enhanced-resolve.git"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v1/npm-enhanced-resolve-3.3.0-950964ecc7f0332a42321b673b38dc8ff15535b3/package.json",
    "readmeFilename": "README.md",
    "readme": "# enhanced-resolve\n\nOffers a async require.resolve function. It's highly configurable.\n\n## Features\n\n* plugin system\n* provide a custom filesystem\n* sync and async node.js filesystems included\n\n\n## Tests\n\n``` javascript\nnpm test\n```\n\n[![Build Status](https://secure.travis-ci.org/webpack/enhanced-resolve.png?branch=master)](http://travis-ci.org/webpack/enhanced-resolve)\n\n\n## Contributing\n\nTake a look at `lib/ResolveFactory.js` to understand how everything fits together. It provides a `createResolver(options)` function and these are the possible options:\n\n| Field                    | Default                     | Description                                                                        |\n| ------------------------ | --------------------------- | ---------------------------------------------------------------------------------- |\n| modules                  | [\"node_modules\"]            | A list of directories to resolve modules from, can be absolute path or folder name |\n| descriptionFiles         | [\"package.json\"]            | A list of description files to read from |\n| plugins                  | []                          | A list of additional resolve plugins which should be applied |\n| mainFields               | [\"main\"]                    | A list of main fields in description files |\n| aliasFields              | []                          | A list of alias fields in description files |\n| mainFiles                | [\"index\"]                   | A list of main files in directories |\n| extensions               | [\".js\", \".json\", \".node\"]   | A list of extensions which should be tried for files |\n| enforceExtension         | false                       | Enforce that a extension from extensions must be used |\n| moduleExtensions         | []                          | A list of module extensions which should be tried for modules |\n| enforceModuleExtension   | false                       | Enforce that a extension from moduleExtensions must be used |\n| alias                    | []                          | A list of module alias configurations or an object which maps key to value |\n| resolveToContext         | false                       | Resolve to a context instead of a file |\n| unsafeCache              | false                       | Use this cache object to unsafely cache the successful requests |\n| cacheWithContext         | true                        | If unsafe cache is enabled, includes `request.context` in the cache key  |\n| cachePredicate           | function() { return true }; | A function which decides whether a request should be cached or not. An object is passed to the function with `path` and `request` properties. |\n| fileSystem               |                             | The file system which should be used |\n| resolver                 | undefined                   | A prepared Resolver to which the plugins are attached |\n\nThe options are passed from the `resolve` key of your webpack configuration e.g.:\n\n```\nresolve: {\n  extensions: ['', '.js', '.jsx'],\n  modules: ['src', 'node_modules'],\n  plugins: [new DirectoryNamedWebpackPlugin()]\n  ...\n},\n```\n\n## License\n\nCopyright (c) 2012-2016 Tobias Koppers\n\nMIT (http://www.opensource.org/licenses/mit-license.php)\n",
    "license": "MIT"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/enhanced-resolve/-/enhanced-resolve-3.3.0.tgz#950964ecc7f0332a42321b673b38dc8ff15535b3",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/enhanced-resolve/-/enhanced-resolve-3.3.0.tgz",
    "hash": "950964ecc7f0332a42321b673b38dc8ff15535b3",
    "registry": "npm",
    "packageName": "enhanced-resolve"
  },
  "registry": "npm",
  "hash": "950964ecc7f0332a42321b673b38dc8ff15535b3"
}