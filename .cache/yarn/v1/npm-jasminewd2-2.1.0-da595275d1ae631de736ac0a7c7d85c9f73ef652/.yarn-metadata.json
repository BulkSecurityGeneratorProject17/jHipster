{
  "manifest": {
    "name": "jasminewd2",
    "description": "WebDriverJS adapter for Jasmine2.",
    "homepage": "https://github.com/angular/jasminewd",
    "keywords": [
      "test",
      "testing",
      "webdriver",
      "webdriverjs",
      "selenium",
      "jasmine"
    ],
    "author": {
      "name": "Julie Ralph",
      "email": "ju.ralph@gmail.com"
    },
    "devDependencies": {
      "@types/jasmine": "^2.5.40",
      "@types/node": "^6.0.56",
      "@types/selenium-webdriver": "^2.53.38",
      "jasmine": "2.4.1",
      "jshint": "^2.9.4",
      "selenium-webdriver": "3.0.1",
      "tslint": "^4.2.0",
      "tslint-eslint-rules": "^3.2.3",
      "typescript": "^2.0.10",
      "vrsource-tslint-rules": "^4.0.0"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/angular/jasminewd.git"
    },
    "main": "index.js",
    "scripts": {
      "jshint": "jshint index.js spec",
      "tslint": "tslint spec/*.ts",
      "lint": "npm run jshint && npm run tslint",
      "tsc": "tsc; cp spec/*.js built_spec",
      "pretest": "npm run lint && npm run tsc",
      "test": "scripts/test.sh"
    },
    "license": "MIT",
    "engines": {
      "node": ">= 6.9.x"
    },
    "version": "2.1.0",
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v1/npm-jasminewd2-2.1.0-da595275d1ae631de736ac0a7c7d85c9f73ef652/package.json",
    "readmeFilename": "README.md",
    "readme": "jasminewd2 [![Build Status](https://travis-ci.org/angular/jasminewd.svg?branch=jasminewd2)](https://travis-ci.org/angular/jasminewd)\n=========\n\nAdapter for Jasmine-to-WebDriverJS. Used by [Protractor](http://www.github.com/angular/protractor).\n\n**Important:** There are two active branches of jasminewd.\n\n - [jasminewd1](https://github.com/angular/jasminewd/tree/jasminewd1) is an adapter for Jasmine 1.3, and uses the package minijasminenode. It is published to npm as `jasminewd`.\n - [jasminewd2](https://github.com/angular/jasminewd/tree/jasminewd2) is an adapter for Jasmine 2.x, and uses the package jasmine. It is published to npm as `jasminewd2`.\n\nFeatures\n--------\n\n - Automatically makes tests asynchronously wait until the WebDriverJS control flow is empty.\n\n - If a `done` function is passed to the test, waits for both the control flow and until done is called.\n\n - If a test returns a promise, waits for both the control flow and the promise to resolve.\n\n - Enhances `expect` so that it automatically unwraps promises before performing the assertion.\n\nInstallation\n------------\n```\nnpm install jasminewd2\n```\n\nUsage\n-----\n\nIn your setup:\n\n```js\nvar JasmineRunner = require('jasmine');\nvar jrunner = new JasmineRunner();\nvar webdriver = require('selenium-webdriver');\n\nglobal.driver = new webdriver.Builder().\n    usingServer('http://localhost:4444/wd/hub').\n    withCapabilities({browserName: 'chrome'}).\n    build();\n\nrequire('jasminewd2').init(driver.controlFlow(), webdriver);\n\njrunner.projectBaseDir = '';\njrunner.execute(['**/*_spec.js']);\n```\n\nIn your tests:\n\n```js\ndescribe('tests with webdriver', function() {\n  it('will wait until webdriver is done', function() {\n    // This will be an asynchronous test. It will finish once webdriver has\n    // loaded the page, found the element, and gotten its text.\n    driver.get('http://www.example.com');\n\n    var myElement = driver.findElement(webdriver.By.id('hello'));\n\n    // Here, expect understands that myElement.getText() is a promise,\n    // and resolves it before asserting.\n    expect(myElement.getText()).toEqual('hello world');\n  });\n})\n```\n\nTypeScript\n----------\n\nFor the typings related to the changes in the global jasmine variables (e.g.\nallowing `it()` blocks to return a promise), we publish the package\n`@types/jasminewd2`.  If you are writing tests using jasminewd (including\nProtractor tests), be sure to include `@types/jasminewd2` in your\n`devDependencies`, as these global type modifications are ***not*** bundled with\nthe `jasminewd2` npm module.\n\njasminewd also exports one function directly: `init`.  Unfortunately, we do not\npublish typings for this function.  If you call this function directly (e.g. you\nare a Protractor dev), you should simply do:\n\n```ts\nrequire('jasminewd2').init(controlFlow, webdriver);\n```\n\n`async` functions / `await`\n---------------------------\n\n`async` functions and the `await` keyword are likely coming in ES2017 (ES8), and\navailable via several compilers.  At the moment, they often break the WebDriver\ncontrol flow.\n([GitHub issue](https://github.com/SeleniumHQ/selenium/issues/3037)).  You can\nstill use them, but if you do then you will have to use `await`/Promises for\nalmost all your synchronization.  See `spec/asyncAwaitAdapterSpec.ts` and\n`spec/asyncAwaitErrorSpec.ts` for examples.\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2014-2017 Google, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/jasminewd2/-/jasminewd2-2.1.0.tgz#da595275d1ae631de736ac0a7c7d85c9f73ef652",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/jasminewd2/-/jasminewd2-2.1.0.tgz",
    "hash": "da595275d1ae631de736ac0a7c7d85c9f73ef652",
    "registry": "npm",
    "packageName": "jasminewd2"
  },
  "registry": "npm",
  "hash": "da595275d1ae631de736ac0a7c7d85c9f73ef652"
}